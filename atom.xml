<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[カソクスルソウゾウリョク]]></title>
  <link href="http://ywatai.github.com/atom.xml" rel="self"/>
  <link href="http://ywatai.github.com/"/>
  <updated>2012-03-07T02:15:55+09:00</updated>
  <id>http://ywatai.github.com/</id>
  <author>
    <name><![CDATA[ywatai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SSL証明書のトラブルシュートに openssl]]></title>
    <link href="http://ywatai.github.com/blog/2012/03/07/dump-ssl-certificates-with-openssl/"/>
    <updated>2012-03-07T01:38:00+09:00</updated>
    <id>http://ywatai.github.com/blog/2012/03/07/dump-ssl-certificates-with-openssl</id>
    <content type="html"><![CDATA[<p>仕事柄、時折ヒトサマからお預かりしたサーバ証明書がらみでトラブルシュートが
必要になることがあります。そんなときには openssl コマンドの出番な訳ですが、
滅多に使わないので使い方なんて覚えていない訳ですよ。えぇ。</p>

<p>そして、その度に使い方を調べるのにやたらと時間を食う、という&#8230;
そんな残念な自分のためのよく使うコマンドリストです。</p>

<!-- more -->


<h2>秘密鍵と証明書のペアが一致するか検証する</h2>

<p>まずは、キーペアが間違っていないか検証します。これが駄目ならもうあきらめるしか。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl s_server -key &lt;サーバ鍵> -cert &lt;証明書ファイル></span></code></pre></td></tr></table></div></figure>


<p>問題がなければ openssl のサーバが立ち上がるはずです。同じくopenssl の s_clientコマンドで
以下のようにしてつないでみれば証明書の中身も確認できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl s_server -key &lt;サーバ鍵> -cert &lt;証明書ファイル></span></code></pre></td></tr></table></div></figure>


<h2>証明書チェインがつながっているか検証する</h2>

<p>続いてよくやる作業としては、証明書チェインの検証があります。チェインが切れていても
ブラウザによってはよしなにやってくれるため気づかないこともありますが、かっこ悪いですしね。
s_server のオプションを眺めてみるとそれっぽいものもありますが、私は普段はサーバを上げずに
検証できる verify コマンドを使っています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl verify -CAfile &lt;CA証明書> &lt;証明書ファイル></span></code></pre></td></tr></table></div></figure>


<p>検証候補のCA証明書が複数あって、かつ1ディレクトリにまとめてある場合には以下も使えます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl verify -CApath &lt;CA証明書ディレクトリのパス> &lt;証明書ファイル></span></code></pre></td></tr></table></div></figure>


<h2>証明書の中身を人間が読める形式でダンプする</h2>

<p>どうも検証が通らなくて、何かおかしいぞ、と言うときには、その証明書が何者なのかを調べる
ことになる訳です。</p>

<p>x509形式の場合には、以下で人間が読める形式にダンプ => issuer でググるのが個人的な定番。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl x509 -in &lt;証明書ファイル> -text</span></code></pre></td></tr></table></div></figure>


<p>過去に PKCS#7 なる形式の証明書が紛れ込んでいることがあったのですが、その場合はまず以下のようにして
証明書を取り出せば同様にいけました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl pkcs7 -in &lt;証明書ファイル> -print_certs</span></code></pre></td></tr></table></div></figure>


<p>&#8230;証明書の形式は、なんだかいろいろあってよくわかりません。</p>

<p>覚える気もないけどな！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress の基本設定]]></title>
    <link href="http://ywatai.github.com/blog/2012/03/06/octopress-basic-configuration/"/>
    <updated>2012-03-06T00:00:00+09:00</updated>
    <id>http://ywatai.github.com/blog/2012/03/06/octopress-basic-configuration</id>
    <content type="html"><![CDATA[<p><a href="http://ywatai.github.com/blog/2012/03/03/start-blogging-with-octopress/">3/3の記事</a>で、とりあえず上げただけで
終わってしまっていた Octopress 紹介記事の続きです。今回は、タイトルなどの基本設定について。</p>

<!-- more -->


<p>Octopressの設定はクローニングしたリポジトリの _config.yml ファイルで行います。
Rubyistな人にはおなじみのYAMLフォーマットですね。それなりに長いので、必要なところだけ抜き出して見たいと思います。</p>

<p>まずいじらなければならないのは、以下の6行。上から順に、ブログのURL、ブログのタイトル、サブタイトル、著者、
サーチボックスのリンク先、サイトの説明です。author と description はメタタグとして埋め込まれます。
<a href="http://www.meatleasing.com/octopress-hidden-features/index.html">このへんの記事</a>を見る限り、keywords も有効なようです。</p>

<figure class='code'><figcaption><span>_config.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://ywatai.github.com</span>
</span><span class='line'><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">My Octopress Blog</span>
</span><span class='line'><span class="l-Scalar-Plain">subtitle</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">A blogging framework for hackers.</span>
</span><span class='line'><span class="l-Scalar-Plain">author</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ywatai</span>
</span><span class='line'><span class="l-Scalar-Plain">simple_search</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://google.com/search</span>
</span><span class='line'><span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>続く date_format は、記事のタイトルの上などに表示される、日付の表示形式を指定します。デフォルトの &#8220;ordinal&#8221; 形式は
日本人にはイマイチなので、私は &#8220;%Y/%m/%d&#8221; に変更しました。コメントにもある通り、strftime の書式指定フォーマットで指定します。</p>

<figure class='code'><figcaption><span>_config.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># Default date format is &quot;ordinal&quot; (resulting in &quot;July 22nd 2007&quot;)</span>
</span><span class='line'><span class="c1"># You can customize the format as defined in</span>
</span><span class='line'><span class="c1"># http://www.ruby-doc.org/core-1.9.2/Time.html#method-i-strftime</span>
</span><span class='line'><span class="c1"># Additionally, %o will give you the ordinal representation of the day</span>
</span><span class='line'><span class="l-Scalar-Plain">date_format</span><span class="p-Indicator">:</span> <span class="s">&quot;%Y/%m/%d&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまで設定すれば、そこそこ使えるようになります。
その先の Jekill and Plugins と書かれているセクションは、読んで字のごとく Jekill、プラグインの設定です。</p>

<p>まずJekill の設定ですが、私は excerpt_link を書き換えた以外は素のままで使っています。
特に不満もないので、それぞれの設定をちゃんと理解していません。
permalink のURL階層が深いので、気になる人は変えておくのがよいかもしれません。</p>

<figure class='code'><figcaption><span>_config.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># If publishing to a subdirectory as in http://site.com/project set &#39;root: /project&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">root</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/</span>
</span><span class='line'><span class="l-Scalar-Plain">permalink</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/blog/:year/:month/:day/:title/</span>
</span><span class='line'><span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">source</span>
</span><span class='line'><span class="l-Scalar-Plain">destination</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">public</span>
</span><span class='line'><span class="l-Scalar-Plain">plugins</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">plugins</span>
</span><span class='line'><span class="l-Scalar-Plain">code_dir</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">downloads/code</span>
</span><span class='line'><span class="l-Scalar-Plain">category_dir</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">blog/categories</span>
</span><span class='line'><span class="l-Scalar-Plain">markdown</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rdiscount</span>
</span><span class='line'><span class="l-Scalar-Plain">pygments</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span> <span class="c1"># default python pygments have been replaced by pygments.rb</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">paginate</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10</span>          <span class="c1"># Posts per page on the blog index</span>
</span><span class='line'><span class="l-Scalar-Plain">pagination_dir</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">blog</span>  <span class="c1"># Directory base for pagination URLs eg. /blog/page/2/</span>
</span><span class='line'><span class="l-Scalar-Plain">recent_posts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5</span>       <span class="c1"># Posts in the sidebar Recent Posts section</span>
</span><span class='line'><span class="l-Scalar-Plain">excerpt_link</span><span class="p-Indicator">:</span> <span class="s">&quot;続きを読む</span><span class="nv"> </span><span class="s">&amp;rarr;&quot;</span>  <span class="c1"># &quot;Continue reading&quot; link text at the bottom of excerpted articles</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">titlecase</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>       <span class="c1"># Converts page and post titles to titlecase</span>
</span></code></pre></td></tr></table></div></figure>


<p>以降はサイドバーへのプラグイン追加と、個々のプラグインの設定セクションです。
標準でrecent_posts, github, twitter, delicious, pinboard, googleplus のプラグインが設定されています。</p>

<p>default_asides では、サイト共通のサイドバーを設定できますが、さらにコメントアウトされている blog_index_asides,
 post_asides, page_asides, 設定を有効にすれば、ブログのトップ、投稿ページ、静的ページのそれぞれで違うサイドバーを表示
するようになります。</p>

<figure class='code'><figcaption><span>_config.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># list each of the sidebar modules you want to include, in the order you want them to appear.</span>
</span><span class='line'><span class="c1"># To add custom asides, create files in /source/_includes/custom/asides/ and add them to the list like &#39;custom/asides/custom_aside_name.html&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">default_asides</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">asides/recent_posts.html</span><span class="p-Indicator">,</span> <span class="nv">asides/github.html</span><span class="p-Indicator">,</span> <span class="nv">asides/twitter.html</span><span class="p-Indicator">,</span> <span class="nv">asides/delicious.html</span><span class="p-Indicator">,</span> <span class="nv">asides/pinboard.html</span><span class="p-Indicator">,</span> <span class="nv">asides/googleplus.html</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Each layout uses the default asides, but they can have their own asides instead. Simply uncomment the lines below</span>
</span><span class='line'><span class="c1"># and add an array with the asides you want to use.</span>
</span><span class='line'><span class="c1"># blog_index_asides:</span>
</span><span class='line'><span class="c1"># post_asides:</span>
</span><span class='line'><span class="c1"># page_asides:</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに、外部サイトと連携するプラグインはアカウントを設定しなければ表示されません。
さらに後のほうに設定項目があるので、ソレっぽいところを設定してみてください。</p>

<p>私の場合、使わないtwitter以外のサードパーティプラグインをバッサリ削り、代わりに、
source/_includes/custom/asides/about.html を追加して Author セクションを表示させています。</p>

<p>それでは、最後に思い通りに設定ができたか、手元で表示して確認してみましょう。
rake preview コマンドでローカルの4000番ポートでプレビュー用のサーバが立ち上がります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>どうでしょう？
問題がなければそのまま公開、コミットしてください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake deploy
</span><span class='line'>git add .
</span><span class='line'>git commit</span></code></pre></td></tr></table></div></figure>


<p>つたない説明で恐縮ですが、またしても次回に続く&#8230;</p>

<p>ちんたらやっているのに飽きた方は公式ドキュメントを読んでいただくのが早いですよー、と。</p>

<ul>
<li><a href="http://octopress.org/docs/">Octopress Documentation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 1.9 の CSV ライブラリにCSVの仕様を教えられた話]]></title>
    <link href="http://ywatai.github.com/blog/2012/03/04/a-trap-of-ruby-1-dot-9-csv-library/"/>
    <updated>2012-03-04T22:35:00+09:00</updated>
    <id>http://ywatai.github.com/blog/2012/03/04/a-trap-of-ruby-1-dot-9-csv-library</id>
    <content type="html"><![CDATA[<p>Octopress の記事が尻切れとんぼな状態ですが、先にコネタを。</p>

<p><a href="http://doc.ruby-lang.org/ja/1.8.7/class/CSV.html">Ruby 1.8標準添付のCSVライブラリ</a>は遅いやら、
APIがイマイチ（IOストリームをストリームとして処理できないのが特に&#8230;）やらで使いづらかったのですが
Ruby 1.9では<a href="http://fastercsv.rubyforge.org">FasterCSV</a>のコードが取り込まれたらしく、
<a href="http://doc.ruby-lang.org/ja/1.9.3/class/CSV.html">API</a>が変更になっています。
CSVのパースに手をかけたくなかった私は飛びついたのですが、この CSV ライブラリ、<a href="http://www.ietf.org/rfc/rfc4180.txt">RFC4180</a>準拠を
うたっていて、大変融通が利かない子だったのでした&#8230;</p>

<!-- more -->


<p>今回私がハマったのは、以下のようなCSVを食わせたためでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1, "hogehoge"
</span><span class='line'>2, "fugafuga"</span></code></pre></td></tr></table></div></figure>


<p>こいつを食わせると、Ruby 1.9 のCSVライブラリは以下のように例外を投げて止まります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CSV::MalformedCSVError: Illegal quoting on line 1.</span></code></pre></td></tr></table></div></figure>


<p>わかりにくいですが、カンマの後にスペースが入っているのが気に入らないと仰せです。</p>

<p>ちなみに、上の例では後続のフィールドがクォートされていなればエラーを吐きません。
この場合どうなるかというと、2番目のフィールドは &#8221; hogeehoge&#8221; と半角スペース付きの値として扱われるのですね。
手元で適当に作ったテストデータを食わせたときにデータによってこけたり、こけなかったりしたので、えらくハマりました。</p>

<p>ハマりにハマったあげくRdoc経由で冒頭の<a href="http://www.ietf.org/rfc/rfc4180.txt">CSVのRFC</a>にたどり着いたのですが、カンマの前後のスペースはRFC的には誤りなのですねぇ&#8230;</p>

<p>なのですが&#8230;</p>

<p><strong>後付けの、しかもinformationalなRFCにそこまで忠実に従わなくてもいいじゃないか！</strong></p>

<hr />

<p>&#8230;と、怒りに任せてこの原稿を書きなぐった後、ためしに Ruby 1.8 のCSVライブラリに同じデータを食わせてみたところ、
Ruby 1.8 のCSVの方はしれっと空配列を返してきたのでした (ruby 1.8.7-p358 で確認)。</p>

<p>Ruby 1.9 の CSV の挙動の方がまとも&#8230;文句言ってごめんなさい。私が悪うございました。</p>

<p>さて、ノーマライズしてCSVに食わせるか、それとも車輪の再発明をするか&#8230;それが問題だ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress はじめました]]></title>
    <link href="http://ywatai.github.com/blog/2012/03/03/start-blogging-with-octopress/"/>
    <updated>2012-03-03T19:41:00+09:00</updated>
    <id>http://ywatai.github.com/blog/2012/03/03/start-blogging-with-octopress</id>
    <content type="html"><![CDATA[<h2><a href="http://octopress.org/">Octopress</a> とは</h2>

<p>Blogライクな静的コンテンツ管理/生成エンジン<a href="http://jekyllrb.com/">Jekill</a> をベースに
イケてるテンプレなどを被せたフレームワークです。（Jekill単体で使ったことがないので、嘘があるかも）
Octopressの何がよいかといえば、あたかもRubyとgitでWebアプリケーションを書くような感覚でブログが書けるのです。
ブログツールに虐げられていたプログラマにとっての救世主！</p>

<!-- more -->


<p>Octopress を使ってのブログ執筆は以下のようなワークフローです。</p>

<ol>
<li>リポジトリを <code>git clone</code> して手元に執筆環境を作る</li>
<li><code>rake new_post</code> で執筆用のひな形を生成する</li>
<li>Markdown でごりごり記事を書く</li>
<li><code>rake generate</code> でコンテンツを生成する</li>
<li><code>rake preview</code> でプレビュー用のサーバを立ち上げて確認する</li>
<li><code>rake deploy</code> でサイトに push して公開する</li>
<li>ソースを git にコミットする</li>
</ol>


<p>git で版管理ができて、Markdownでさくさく書けるだけでもう私は満足です。
さらにcodeblockや include_code、 gistプラグインを使えば、簡単にコードが貼付けられたりして。
いやぁ、わかってますなー。</p>

<p>何番煎じかわかりませんが、私もこのすばらしさを世に広めたく、セットアップ手順をまとめてみました。</p>

<h2>はじめる Octopress </h2>

<p>まずは、<a href="https://github.com/imathis/octopress">Octopressのリポジトリ</a>からソースを持ってきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git clone https://github.com/imathis/octopress.git
</span><span class='line'>cd octopress</span></code></pre></td></tr></table></div></figure>


<p>動作にはRubyが必要なので、まずはRuby環境をセットアップします。ドキュメントには「ruby 1.9.2 を使え」と書いてあるので、rbenv で入れました。
bundler も必要なので、ついでに入れておきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rbenv install 1.9.2-p290
</span><span class='line'>rbenv rehash
</span><span class='line'>rbenv local 1.9.2-p290
</span><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash</span></code></pre></td></tr></table></div></figure>


<p>つづいて依存関係をインストールして、octopress 環境をセットアップします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<p>続いて、公開先を設定します。
公式サイトでは github pages, heroku, rsync の3つの方法が紹介されています。
<a href="http://pages.github.com/">Github Pages</a> を使うと、版管理と公開が1カ所でできるので、私はこれを使うことにしました。</p>

<p>先にGithub にログインして<code>&lt;ユーザ名&gt;.github.com</code>なリポジトリを作ります。</p>

<p>手元の設定はrakeタスクで一発です。
実行するとリポジトリのurlを聞かれるので、<code>git@github.com:/ywatai/ywatai.githu.com</code> のように、読み書き可能なURLを指定してください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>正しく設定できているか、早速確認しましょう。
ページを生成、公開するのにも rake を使います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<p>でデフォルト設定のままコンテンツを生成したら、以下のコマンドで公開です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>これで、github のリポジトリにコンテンツが push されました。しばらく待つとgithubからページ公開完了通知がくるので
アクセスしてみましょう。</p>

<p><img src="http://ywatai.github.com/images/octopress_initial.png"></p>

<p>どうでしょう？見えましたか？</p>

<p>&#8230;中途半端ですが、いったんここまでに。次回、基本設定と記事執筆についてまとめる予定。</p>

<p>設定をいじりはじめる前に、忘れずにコミットしておきましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m "initial commit."</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
