<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[カソクスルソウゾウリョク]]></title>
  <link href="http://ywatai.github.com/atom.xml" rel="self"/>
  <link href="http://ywatai.github.com/"/>
  <updated>2012-03-04T23:54:28+09:00</updated>
  <id>http://ywatai.github.com/</id>
  <author>
    <name><![CDATA[ywatai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby 1.9 の CSV ライブラリにCSVの仕様を教えられた話]]></title>
    <link href="http://ywatai.github.com/blog/2012/03/04/a-trap-of-ruby-1-dot-9-csv-library/"/>
    <updated>2012-03-04T22:35:00+09:00</updated>
    <id>http://ywatai.github.com/blog/2012/03/04/a-trap-of-ruby-1-dot-9-csv-library</id>
    <content type="html"><![CDATA[<p>Octopress の記事が尻切れとんぼな状態ですが、先にコネタを。</p>

<p><a href="http://doc.ruby-lang.org/ja/1.8.7/class/CSV.html">Ruby 1.8標準添付のCSVライブラリ</a>は遅いやら、
APIがイマイチ（IOストリームをストリームとして処理できないのが特に&#8230;）やらで使いづらかったのですが
Ruby 1.9では<a href="http://fastercsv.rubyforge.org">FasterCSV</a>のコードが取り込まれたらしく、
<a href="http://doc.ruby-lang.org/ja/1.9.3/class/CSV.html">API</a>が変更になっています。
CSVのパースに手をかけたくなかった私は飛びついたのですが、この CSV ライブラリ、<a href="http://www.ietf.org/rfc/rfc4180.txt">RFC4180</a>準拠を
うたっていて、大変融通が利かない子だったのでした&#8230;</p>

<!-- more -->


<p>今回私がハマったのは、以下のようなCSVを食わせたためでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1, "hogehoge"
</span><span class='line'>2, "fugafuga"</span></code></pre></td></tr></table></div></figure>


<p>こいつを食わせると、Ruby 1.9 のCSVライブラリは以下のように例外を投げて止まります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CSV::MalformedCSVError: Illegal quoting on line 1.</span></code></pre></td></tr></table></div></figure>


<p>わかりにくいですが、カンマの後にスペースが入っているのが気に入らないと仰せです。</p>

<p>ちなみに、上の例では後続のフィールドがクォートされていなればエラーを吐きません。
この場合どうなるかというと、2番目のフィールドは &#8221; hogeehoge&#8221; と半角スペース付きの値として扱われるのですね。
手元で適当に作ったテストデータを食わせたときにデータによってこけたり、こけなかったりしたので、えらくハマりました。</p>

<p>ハマりにハマったあげくRdoc経由で冒頭の<a href="http://www.ietf.org/rfc/rfc4180.txt">CSVのRFC</a>にたどり着いたのですが、カンマの前後のスペースはRFC的には誤りなのですねぇ&#8230;</p>

<p>なのですが&#8230;</p>

<p><strong>後付けの、しかもinformationalなRFCにそこまで忠実に従わなくてもいいじゃないか！</strong></p>

<hr />

<p>&#8230;と、怒りに任せてこの原稿を書きなぐった後、ためしに Ruby 1.8 のCSVライブラリに同じデータを食わせてみたところ、
Ruby 1.8 のCSVの方はしれっと空配列を返してきたのでした (ruby 1.8.7-p358 で確認)。</p>

<p>Ruby 1.9 の CSV の挙動の方がまとも&#8230;文句言ってごめんなさい。私が悪うございました。</p>

<p>さて、ノーマライズしてCSVに食わせるか、それとも車輪の再発明をするか&#8230;それが問題だ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress はじめました]]></title>
    <link href="http://ywatai.github.com/blog/2012/03/03/start-blogging-with-octopress/"/>
    <updated>2012-03-03T19:41:00+09:00</updated>
    <id>http://ywatai.github.com/blog/2012/03/03/start-blogging-with-octopress</id>
    <content type="html"><![CDATA[<h2><a href="http://octopress.org/">Octopress</a> とは</h2>

<p>Blogライクな静的コンテンツ管理/生成エンジン<a href="http://jekyllrb.com/">Jekill</a> をベースに
イケてるテンプレなどを被せたフレームワークです。（Jekill単体で使ったことがないので、嘘があるかも）
Octopressの何がよいかといえば、あたかもRubyとgitでWebアプリケーションを書くような感覚でブログが書けるのです。
ブログツールに虐げられていたプログラマにとっての救世主！</p>

<!-- more -->


<p>Octopress を使ってのブログ執筆は以下のようなワークフローです。</p>

<ol>
<li>リポジトリを <code>git clone</code> して手元に執筆環境を作る</li>
<li><code>rake new_post</code> で執筆用のひな形を生成する</li>
<li>Markdown でごりごり記事を書く</li>
<li><code>rake generate</code> でコンテンツを生成する</li>
<li><code>rake preview</code> でプレビュー用のサーバを立ち上げて確認する</li>
<li><code>rake deploy</code> でサイトに push して公開する</li>
<li>ソースを git にコミットする</li>
</ol>


<p>git で版管理ができて、Markdownでさくさく書けるだけでもう私は満足です。
さらにcodeblockや include_code、 gistプラグインを使えば、簡単にコードが貼付けられたりして。
いやぁ、わかってますなー。</p>

<p>何番煎じかわかりませんが、私もこのすばらしさを世に広めたく、セットアップ手順をまとめてみました。</p>

<h2>はじめる Octopress </h2>

<p>まずは、<a href="https://github.com/imathis/octopress">Octopressのリポジトリ</a>からソースを持ってきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git clone https://github.com/imathis/octopress.git
</span><span class='line'>cd octopress</span></code></pre></td></tr></table></div></figure>


<p>動作にはRubyが必要なので、まずはRuby環境をセットアップします。ドキュメントには「ruby 1.9.2 を使え」と書いてあるので、rbenv で入れました。
bundler も必要なので、ついでに入れておきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rbenv install 1.9.2-p290
</span><span class='line'>rbenv rehash
</span><span class='line'>rbenv local 1.9.2-p290
</span><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash</span></code></pre></td></tr></table></div></figure>


<p>つづいて依存関係をインストールして、octopress 環境をセットアップします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<p>続いて、公開先を設定します。
公式サイトでは github pages, heroku, rsync の3つの方法が紹介されています。
<a href="http://pages.github.com/">Github Pages</a> を使うと、版管理と公開が1カ所でできるので、私はこれを使うことにしました。</p>

<p>先にGithub にログインして<code>&lt;ユーザ名&gt;.github.com</code>なリポジトリを作ります。</p>

<p>手元の設定はrakeタスクで一発です。
実行するとリポジトリのurlを聞かれるので、<code>git@github.com:/ywatai/ywatai.githu.com</code> のように、読み書き可能なURLを指定してください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>正しく設定できているか、早速確認しましょう。
ページを生成、公開するのにも rake を使います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<p>でデフォルト設定のままコンテンツを生成したら、以下のコマンドで公開です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>これで、github のリポジトリにコンテンツが push されました。しばらく待つとgithubからページ公開完了通知がくるので
アクセスしてみましょう。</p>

<p><img src="http://ywatai.github.com/images/octopress_initial.png"></p>

<p>どうでしょう？見えましたか？</p>

<p>&#8230;中途半端ですが、いったんここまでに。次回、基本設定と記事執筆についてまとめる予定。</p>

<p>設定をいじりはじめる前に、忘れずにコミットしておきましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m "initial commit."</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
